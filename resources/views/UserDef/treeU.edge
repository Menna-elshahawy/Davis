<DOCTYPE! html>
    <html>
        <head>
        {{ style('UserDef/stackStyleU') }}
            </head>
                  
            <body>
                
                <title> Binary Search Tree </title>
                
                <h1> BINARY SEARCH TREE </h1>
        
                <a HREF="/UserDefined"> <span class="b" onmouseover="showBack()" onmouseout="disBack()">&#8249;</span></a>
                <div class="back" id="back"> Back </div>                
                    <a HREF="/homePage"> <span class="bH" onmouseover="showBackH()" onmouseout="disBackH()">&#171;</span></a>
                <div class="backH" id="backH"> Back to home page </div>
                <span class="arr">&#8628;</span>

				<div id="arrow"  onclick="Info()" > <span class="infoAr" id="infoAr">&#8250;</span> 
                <span class="arrH" id="arrH">&#8249;</span>  </div>
                <div class="know" id="know">Instructions before you write your code: </div>
                <div class="info" id="info"> 
                    -You should write the code in java language<br>
                    -You will write the whole code starting from creating the public class and the object variables 
                    and methods to the main method. You can easily copy your working java code and paste it here<br>
                    -You cannot add comments to the code, to avoid errors<br>
                    -In the main method, you will create a list of Strings as so: String[] a= new String[length]; 
                    where length should be greater than or equal the number of method calls you intend to invoke on the 
                    object<br>
                    -After creating the object for the first time, and after each method call on the object (insert/ delete) you will insert 
                    the displayed object to the list a. Consequently the display method of the data structure should return the displayed 
                    object instead of printing it, this returned string will be inserted to the list of strings a. Example: stack.push(5); a[1]=stack.display();<br>

                    -After you finish all the method calls, you will print the list a with this command line: System.out.println(Arrays.toString(a)); 
                    And don't forget to add this import line at the very beginning of the code to avoid errors, import java.util.Arrays;<br><br>

                </div>

                <div class="stackHome">
                    
      
                    <form action="/executeCode" method="POST"> 
                        {{ csrfField() }}
                        <div class="tex"> Enter your code here </div>
                        <textarea name="code" class="input" rows="50" cols="80" autocomplete="on"> import java.util.Arrays;

class Node{

	public Comparable data;
	public Node left,right;

	public Node (Comparable data){
		this(data, null, null);
	}

	public Node(Comparable data, Node left, Node right){

		this.data = data;
		this.left = left;
		this.right = right;
	}		
}
public class BTree {
	private Node root;
	Comparable [] tree;  

	public BTree() {
		root = null;
		tree=new Comparable[16];
	}

	public void add(Comparable key) {
		Node current = root, parent = null;
		while (current != null) {
			if (key.compareTo(current.data) < 0) {
				parent = current;
				current = current.left;
			}

			else{
				parent = current;
				current = current.right;
			}
		}

		if (parent == null)
			root = new Node(key);

		else {
			if (key.compareTo(parent.data) < 0)
				parent.left = new Node(key);

			else
				parent.right = new Node(key);
		}
	}

	public boolean delete(Comparable key) {
        if (root == null)
               return false;
        Node current = root;
        Node parent = root;
        boolean right = true;

        while (key.compareTo(current.data) != 0) {  
               if (key.compareTo(current.data) < 0) {         
                     right = false;
                     parent = current;
                     current = current.left;
               } else {
                     right = true;
                     parent = current;
                     current = current.right;
               }
               if (current == null)
                     return false;
        }

        Node substitute = null;
        if (current.left == null && current.right == null)
               substitute = null;

        else if (current.left == null)
               substitute = current.right;
        else if (current.right == null)
               substitute = current.left;
        else 
        {
               Node successor = current.right;
               Node successorParent = current;
               while (successor.left != null) {
                     successorParent = successor;
                     successor = successor.left;
               }
               substitute = successor;
               if (successorParent == current) {
                     if (successor.right == null)
                            successorParent.right = null;
                     else
                            successorParent.right = successor.right;
               } else {
                     if (successor.right == null)
                            successorParent.left = null;
                     else
                            successorParent.left = successor.right;
               }
               successor.right = current.right;
               successor.left = current.left;
               substitute = successor;
        } 
        if (current == root) 
               root = substitute;
        else if (right)
               parent.right = substitute;
        else
               parent.left = substitute;
        current=null; 
        return true;

 }


	public String display(){
	    Node current=root;
	    Node parent=root;

	    if(current!=null){
	        tree[1]=current.data;
	    }
	    
	    if(current != null){
    	    if(current.left!=null){
    	       tree[2]=current.left.data;
    	    }
    	    else{
    	        tree[2]=null;
    	    }
    	    if(current.right!=null){
    	       tree[3]=current.right.data;
    	    }
    	    else{
    	        tree[3]=null;
    	    }
    	    
    	    current=parent.left;
    	    if(current!=null){
        	    if(current.left!=null){
        	       tree[4]=current.left.data;
        	    }
        	    else{
    	            tree[4]=null;
    	        }
        	    if(current.right!=null){
        	       tree[5]=current.right.data;
        	    }
        	    else{
    	            tree[5]=null;
    	        }
    	    
    	    
        	    Node parentL=current;
        	    
        	    current=parentL.left;
        	    if(current!=null){
            	    if(current.left!=null){
            	       tree[8]=current.left.data;
            	    }
            	    else{
        	            tree[8]=null;
        	        }
            	    if(current.right!=null){
            	       tree[9]=current.right.data;
            	    }
            	    else{
        	            tree[9]=null;
        	        }
        	    }
        	    
        	    current=parentL.right;
        	    
        	    if(current!=null){
            	    if(current.left!=null){
            	       tree[10]=current.left.data;
            	    }
            	    else{
            	        tree[10]=null;
            	    }
            	    if(current.right!=null){
            	       tree[11]=current.right.data;
            	    }
            	    else{
            	        tree[11]=null;
            	    }
        	    }
    	    }
	    
    	    current=parent.right;
    	    if(current!=null){
        	    if(current.left!=null){
        	       tree[6]=current.left.data;
        	    }
        	    else{
        	        tree[6]=null;
        	    }
        	    if(current.right!=null){
        	       tree[7]=current.right.data;
        	    }
        	    else{
        	        tree[7]=null;
        	    }
        	    Node parentR=current;
        	    
        	    
        	    
        	    current=parentR.left;
        	    if(current!=null){
            	    if(current.left!=null){
            	       tree[12]=current.left.data;
            	    }
            	    else{
            	        tree[12]=null;
            	    }
            	    if(current.right!=null){
            	       tree[13]=current.right.data;
            	    }
            	    else{
            	        tree[13]=null;
            	    }
        	    }
        	    
        	    current=parentR.right;
        	    if(current!=null){
            	    if(current.left!=null){
            	       tree[14]=current.left.data;
            	    }
            	    else{
            	        tree[14]=null;
            	    }
            	    if(current.right!=null){
            	       tree[15]=current.right.data;
            	    }
            	    else{
            	        tree[15]=null;
            	    }
        	    }
    	    }
	    }
	    else{
	        tree[1]=null;
	    }
	    
	    return (Arrays.toString(tree));
	}
	
	static void print(String []a) {
	    System.out.println(Arrays.toString(a)); 
	}
	
	public static void main(String[]args){
	    BTree t=new BTree();
	    String[] a=new String[14];
	    a[0]=t.display();
	    t.add(14);
	    a[1]=t.display();
	    t.add(15);
	    a[2]=t.display();
	    t.add(5);
	    a[3]=t.display();
	    t.delete(15);
	    a[4]=t.display();
	    t.add(10);
	    a[5]=t.display();
	    t.add(20);
	    a[6]=t.display();
	    t.add(25);
	    a[7]=t.display();
	    t.add(18);
	    a[8]=t.display();
	    t.add(12);
	    a[9]=t.display();
	    t.add(9);
	    a[10]=t.display();
	    t.delete(5);
	    a[11]=t.display();
	    t.add(4);
	    a[12]=t.display();

	    print(a);
	}

}

</textarea>
                        <input type="submit" value="Run" class="run">
                        <textarea class="data" name="data">tree</textarea>
                    </form>


                    <div class="abt" onclick="show()"> About </div>
                    
                <div id="myModal" class="modal">
                    <div class="modal-content">
                    <span class="close" id="close" onclick="closeM()">&#215;</span>
                    <p> <span style="color: #303c6c; position: fixed; left: 620; font-size: 22;">Welcome to DAVIS</span> <br> <br> DAVIS is a tool for Data Structures and Algorithms Visualization which is implemented to help students better understand data structures and algorithms through visualization. It has two modes :<br> 1-Standard: where you can visualize the data structures using the default algorithms <br> 2-User-defined: where you enter your own code and visualize the output  </p>
                  </div>
                 </div>
                    
                     <p class= "area" id="area"> </p>
                    
                </div>
                    
                <p class ="notify" id="notify"> </p>
                <p class ="action" id="action"> </p>   <br> <br>

                        
            
                <script>


					var count=1;

                    function display(){
                        //console.log(stack);

                        if(stack==undefined){
                            return;
                        }
                        
                        if(stack.length!=0){
                            var list=document.getElementById("area");
                                list.appendChild(cont);
                                cont.innerHTML="";
                                cont.appendChild(ul);
                                ul.innerHTML="";
                                for(i=stack.length-1;i>=0;i--){
                                    let li = document.createElement('li');
                                    li.innerHTML = stack[i];
                                    ul.appendChild(li);   
                                }
                        }    
                    }


                    function show() {
                        document.getElementById("myModal").style.display = "block";
                    }

                    function closeM() {
                        document.getElementById("myModal").style.display = "none";
                    }

                    window.onclick = function(event) {
                        if (event.target == document.getElementById("myModal")) {
                            document.getElementById("myModal").style.display = "none";
                        }
                    }


                    function showBack(){
                        document.getElementById("back").style.display='inline-block';
                    }

                    function disBack(){
                        document.getElementById("back").style.display='none';
                    }

                    function showBackH(){
                        document.getElementById("backH").style.display='inline-block';
                    }

                    function disBackH(){
                        document.getElementById("backH").style.display='none';
                    }

					function Info(){
                        if(count%2==0){
                            document.getElementById("info").classList.add("infoAnimS");
                            document.getElementById("info").classList.remove("infoAnimH");
                            document.getElementById("infoAr").style.display='none';
                            document.getElementById("arrH").style.display='inline';
                        }
                        else{
                            document.getElementById("info").classList.add("infoAnimH");
                            document.getElementById("info").classList.remove("infoAnimS");
                            document.getElementById("arrH").style.display='none';
                            document.getElementById("infoAr").style.display='inline';
                            
                        }
                        count++;
                    }

            
                </script>

            </body>   
        
    </html>